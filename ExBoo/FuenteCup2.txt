package fes.aragon.compilador;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

action code{:
	public void imprimirValor(String str){
		System.out.println("Valor del token es: "+str);
	}
:};
parser code{:
	public static TablaSimbolos tabla = new TablaSimbolos();
	public static Lexico lex;
	public void syntax_error(Symbol st){
		System.out.println("Error en la linea "+ lex.getYyline() +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo,TablaSimbolos t) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)),t);
		new parser(lex).parse();
	}
	
:};
terminal PUNTOYCOMA, OR, AND, NOT, TRUE;
terminal FALSE, LPAREN, RPAREN, ASIG;
terminal Datos ID;


non terminal expr_lista, expr_parte;
non terminal Boolean E, asig; 


precedence left PUNTOYCOMA, OR, AND, NOT;

expr_lista ::= expr_lista expr_parte
		|expr_lista asig PUNTOYCOMA
		|asig PUNTOYCOMA		
		|expr_parte
		|error{:;:}
		;
		
expr_parte ::=E:e PUNTOYCOMA
	{:
            System.out.println("Resultado es: "+ e);
            imprimirValor(String.valueOf(e));
        :}
        ;
        
asig ::= ID:s ASIG E:e 
        {:
            RESULT=e; 
            s.setValor(String.valueOf(e));
	:}
	|ID:s ASIG asig:e 
        {:
            RESULT=e;
            s.setValor(String.valueOf(e));
	:};

E	::=| E:e1 OR E:e2 {:RESULT = (e1 || e2);:}
	   | E:e1 AND E:e2 {:RESULT = (e1 && e2);:}
	   | NOT E:e1 {:RESULT = !e1;:}
	   | LPAREN E:e1 RPAREN {:RESULT = e1;:}
	   | TRUE:N {:RESULT = new Boolean(true);:}
	   | FALSE:N {:RESULT = new Boolean(false);:}
	   | ID:s 
        {:
            System.out.println("Valor en tabla: "+s.getValor());
            RESULT=Boolean.valueOf(s.getValor());
        :}
	   ;

