
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 16 11:23:16 CDT 2022
//----------------------------------------------------

package fes.aragon.compilador;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 16 11:23:16 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\002\005\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\004\004\000\002\004\007\000\002" +
    "\004\007\000\002\005\004\000\002\005\003\000\002\006" +
    "\004\000\002\006\007\000\002\007\004\000\002\007\003" +
    "\000\002\010\004\000\002\010\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\024\003\014\005\017\006\006\010\015\011" +
    "\016\012\010\013\005\014\004\015\007\001\002\000\004" +
    "\004\ufff9\001\002\000\004\004\ufffa\001\002\000\004\007" +
    "\054\001\002\000\004\004\ufff8\001\002\000\004\004\ufffb" +
    "\001\002\000\024\002\052\005\017\006\006\010\015\011" +
    "\016\012\010\013\005\014\004\015\007\001\002\000\004" +
    "\004\051\001\002\000\024\002\uffff\005\uffff\006\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\001\002" +
    "\000\024\002\ufffe\005\ufffe\006\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002\000\004\020\047" +
    "\001\002\000\004\020\046\001\002\000\004\020\020\001" +
    "\002\000\004\016\021\001\002\000\020\006\022\010\015" +
    "\011\016\012\010\013\005\014\004\015\007\001\002\000" +
    "\004\007\031\001\002\000\004\004\030\001\002\000\022" +
    "\006\022\010\015\011\016\012\010\013\005\014\004\015" +
    "\007\017\026\001\002\000\022\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\001\002\000" +
    "\024\002\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\001\002\000\022\006\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\001\002\000\022\006\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\001\002\000\004\016\032" +
    "\001\002\000\020\005\035\010\015\011\016\012\010\013" +
    "\005\014\004\015\007\001\002\000\004\004\045\001\002" +
    "\000\022\005\035\010\015\011\016\012\010\013\005\014" +
    "\004\015\007\017\043\001\002\000\004\020\037\001\002" +
    "\000\022\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\017\uffef\001\002\000\004\016\040\001\002" +
    "\000\020\006\022\010\015\011\016\012\010\013\005\014" +
    "\004\015\007\001\002\000\022\006\022\010\015\011\016" +
    "\012\010\013\005\014\004\015\007\017\042\001\002\000" +
    "\022\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\001\002\000\022\006\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\001\002" +
    "\000\022\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\017\ufff0\001\002\000\022\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee\001" +
    "\002\000\004\004\ufffc\001\002\000\004\020\050\001\002" +
    "\000\004\004\ufffd\001\002\000\024\002\ufff7\005\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\001\002\000\004\002\000\001\002\000\024\002\001\005" +
    "\001\006\001\010\001\011\001\012\001\013\001\014\001" +
    "\015\001\001\002\000\004\016\055\001\002\000\020\005" +
    "\035\010\015\011\016\012\010\013\005\014\004\015\007" +
    "\001\002\000\022\005\035\010\015\011\016\012\010\013" +
    "\005\014\004\015\007\017\057\001\002\000\024\002\ufff5" +
    "\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\010\002\011\003\010\004\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\011\004\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\022\005\023\006\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\022\006" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\032\007\033\010\035\001\001\000\002\001\001\000\006" +
    "\002\032\010\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\022\005\040\006\024" +
    "\001\001\000\006\002\022\006\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\032\007\055\010\035\001\001\000" +
    "\006\002\032\010\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Lexico lex;
	public static String textError;
	public static boolean valido = true;
	
	public void syntax_error(Symbol st){
        textError = "Error en la linea "+ lex.getYyline() +
                    " columna: "+ lex.getYy_currentPos();
        valido = false;
	}
	
	public void cargar(InputStream archivo) throws Exception{	
		lex=new Lexico(archivo);
		new parser(lex).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public StringBuilder info = new StringBuilder();
	public Archivo archivoSalida=
    new Archivo(new File(System.getProperty("user.dir")+"/salida.txt"));
    
	public void almacenar(String datos,boolean valor){
		info.append(datos + "\n");
		archivoSalida.escribir(info,valor);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion_v_s ::= REPETIR NUMERO PARA instrucciones_r PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				String dato = "";
				for (int i=0;i<n;i++){
					if (i<n-1){
						dato = dato + ins + "\n";
					}else{
						dato = dato + ins;
					}
				}
				RESULT=dato;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_v_s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion_v_s ::= instruccion PUNTOYCOMA 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_v_s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones_v ::= instruccion_v_s 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_v",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones_v ::= instrucciones_v instruccion_v_s 
            {
              Object RESULT =null;
		int ins_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ins_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new String(ins_1+"\n"+ins_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_v",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion_r_s ::= VER FRUTA PARA instrucciones_v PARC 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT="ver fruta {\n"+ins+"\n}";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_r_s",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion_r_s ::= instruccion PUNTOYCOMA 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_r_s",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones_r ::= instruccion_r_s 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_r",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones_r ::= instrucciones_r instruccion_r_s 
            {
              Object RESULT =null;
		int ins_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ins_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new String(ins_1+"\n"+ins_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_r",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_s ::= VER FRUTA PARA instrucciones_v PARC 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				almacenar("ver fruta {",false);
				almacenar(ins+"",false);
				almacenar("}",false);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_s",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_s ::= REPETIR NUMERO PARA instrucciones_r PARC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				for (int i=0;i<n;i++){
					almacenar(ins+"",false);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_s",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion_s ::= instruccion PUNTOYCOMA 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		almacenar(ins+"",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_s",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= DER 
            {
              Object RESULT =null;
		RESULT="derecha";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= IZQ 
            {
              Object RESULT =null;
		RESULT="izquierda";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= ABAJO 
            {
              Object RESULT =null;
		RESULT="abajo";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= ARRIBA 
            {
              Object RESULT =null;
		RESULT="arriba";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= MOVER NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="mover "+n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= COLOCA NUMERO NUMERO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="coloca "+x+" "+y;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= error 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion_s 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // instrucciones ::= instrucciones instruccion_s 
            {
              Object RESULT =null;
		int ins_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ins_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new String(ins_1+"\n"+ins_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

